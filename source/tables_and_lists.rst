====================
Таблицы и списки
====================

Sphinx поддерживает различные типы таблиц и списков для структурирования информации.

Простые таблицы
===============

Простая таблица создается с помощью символов равенства:

=====  =====  ======
   Inputs     Output
------------  ------
  A      B    A or B
=====  =====  ======
False  False  False
True   False  True
False  True   True
True   True   True
=====  =====  ======

Сложные таблицы
===============

Более сложные таблицы с объединением ячеек:

+------------------------+------------+----------+----------+
| Header row, column 1   | Header 2   | Header 3 | Header 4 |
| (header rows optional) |            |          |          |
+========================+============+==========+==========+
| body row 1, column 1   | column 2   | column 3 | column 4 |
+------------------------+------------+----------+----------+
| body row 2             | Cells may span columns.          |
+------------------------+------------+---------------------+
| body row 3             | Cells may  | - Table cells       |
+------------------------+ span rows. | - contain           |
| body row 4             |            | - body elements.    |
+------------------------+------------+---------------------+

CSV таблицы
===========

Таблицы можно создавать из CSV данных:

.. csv-table:: Статистика по языкам программирования
   :header: "Язык", "Рейтинг", "Изменение", "Применение"
   :widths: 20, 10, 10, 60

   "Python", "1", "+2%", "ИИ, веб-разработка, анализ данных"
   "JavaScript", "2", "0%", "Фронтенд, бэкенд, мобильные приложения"
   "Java", "3", "-1%", "Корпоративные приложения, Android"
   "C#", "4", "+1%", "Windows приложения, игры, веб"
   "C++", "5", "-2%", "Системное программирование, игры"

List таблицы
============

.. list-table:: Сравнение фреймворков
   :widths: 25 25 50
   :header-rows: 1

   * - Фреймворк
     - Язык
     - Описание
   * - Django
     - Python
     - Полнофункциональный веб-фреймворк с admin панелью
   * - Flask
     - Python  
     - Микрофреймворк для быстрой разработки
   * - Express.js
     - JavaScript
     - Минималистичный фреймворк для Node.js
   * - Spring Boot
     - Java
     - Фреймворк для создания микросервисов

Многоуровневые списки
=====================

Нумерованные списки с вложенностью:

1. Первый уровень

   а. Второй уровень
   б. Ещё один элемент второго уровня
   
      i. Третий уровень
      ii. Элемент третьего уровня
      
   в. Возврат к второму уровню

2. Второй элемент первого уровня

   1. Нумерованный подсписок
   2. Второй элемент подсписка

Маркированные списки
====================

* Основной элемент

  + Подэлемент
  + Другой подэлемент
  
    - Глубже
    - Ещё глубже
    
      * Самый глубокий уровень

* Второй основной элемент

Списки определений
==================

API (Application Programming Interface)
    Набор протоколов и инструментов для создания приложений.
    
    Используется для:
    
    * Интеграции между системами
    * Предоставления данных
    * Автоматизации процессов

Framework
    Программная платформа, определяющая структуру программной системы.
    
    Преимущества:
    
    1. Ускорение разработки
    2. Стандартизация кода
    3. Готовые решения

REST (Representational State Transfer)
    Архитектурный стиль для веб-сервисов.

Поля (Field Lists)
==================

:Автор: Dias Kabdualiyev
:Версия: 1.0.0
:Дата: 2025-01-16
:Статус: В разработке
:Теги: Sphinx, документация, demo

Списки опций
============

-a            Короткая опция
-b file       Опция с аргументом
--verbose     Длинная опция
--output=file Длинная опция с аргументом

Комбинированные структуры
=========================

Таблица со списками внутри ячеек:

.. list-table:: Технологический стек проекта
   :widths: 30 70
   :header-rows: 1

   * - Категория
     - Технологии
   * - Frontend
     - * React.js
       * TypeScript
       * Tailwind CSS
   * - Backend
     - * Python
       * FastAPI
       * PostgreSQL
   * - DevOps
     - * Docker
       * GitHub Actions
       * AWS

Список с кодом:

1. Установка зависимостей:

   .. code-block:: bash
   
      pip install sphinx

2. Создание проекта:

   .. code-block:: bash
   
      sphinx-quickstart

3. Сборка документации:

   .. code-block:: bash
   
      make html

Таблица с кодом
===============

.. list-table:: Примеры команд Git
   :widths: 30 70
   :header-rows: 1

   * - Команда
     - Описание
   * - ``git init``
     - Инициализация нового репозитория
   * - ``git add .``
     - Добавление всех файлов в индекс
   * - ``git commit -m "message"``
     - Создание коммита с сообщением
   * - ``git push origin main``
     - Отправка изменений на удаленный сервер

Контрольные списки
==================

.. note::
   Sphinx не поддерживает checkbox списки напрямую, но их можно эмулировать:

Задачи проекта:

* ☑ Настроить Sphinx
* ☑ Создать базовую структуру
* ☐ Добавить автодокументацию
* ☐ Настроить CI/CD
* ☐ Опубликовать на GitHub Pages

Библиография
=============

Список литературы:

.. [Ref1] Brand, S. *How Buildings Learn: What Happens After They're Built*. 
   New York: Penguin Books, 1994.
   
.. [Ref2] Alexander, C. *A Pattern Language: Towns, Buildings, Construction*. 
   New York: Oxford University Press, 1977.

Ссылки на источники: [Ref1]_ и [Ref2]_

Глоссарий и термины
====================

В документации можно использовать термины из основного :doc:`glossary`:

* **API** - интерфейс программирования приложений
* **Sphinx** - генератор документации
* **reStructuredText** - язык разметки

Это обеспечивает единообразие терминологии во всей документации. 